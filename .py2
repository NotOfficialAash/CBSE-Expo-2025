import cv2
import threading
import time
from ultralytics import YOLO

# Load YOLOv5s model
model = YOLO('yolov5s.pt')

# Classes for vehicles
VEHICLE_CLASSES = [2, 5, 7]  # 2: car, 5: bus, 7: truck

# Time constants
YELLOW_TIME = 3
HIGH_GREEN_TIME = 15
LOW_GREEN_TIME = 7
CAR_THRESHOLD = 5

# Signal names and video sources (0, 1, 2 can be webcams or replace with paths to video files)
SIGNALS = {
    'A': 0,
    'B': 0,
    'C': 0
}

# Shared dictionary to hold current light status
light_status = {'A': 'RED', 'B': 'RED', 'C': 'RED'}

def detect_car_density(source):
    cap = cv2.VideoCapture(source)
    ret, frame = cap.read()
    if not ret:
        return 0
    results = model(frame)[0]
    car_count = 0
    for box in results.boxes:
        cls = int(box.cls.item())
        if cls in VEHICLE_CLASSES:
            car_count += 1
    cap.release()
    return car_count

def run_signal(signal_id, source):
    global light_status
    while True:
        # Step 1: Detect car density
        car_count = detect_car_density(source)
        green_time = HIGH_GREEN_TIME if car_count > CAR_THRESHOLD else LOW_GREEN_TIME

        # Step 2: Set current signal to GREEN, others to RED or YELLOW
        for s in light_status:
            if s == signal_id:
                light_status[s] = 'GREEN'
            else:
                light_status[s] = 'RED'

        # Step 3: Print current signal states
        print("\n=== SIGNAL STATES ===")
        for s in light_status:
            if light_status[s] == 'GREEN':
                print(f"Signal {s}: GREEN {green_time}s")
            elif light_status[s] == 'YELLOW':
                print(f"Signal {s}: YELLOW {YELLOW_TIME}s")
            else:
                print(f"Signal {s}: RED")

        # Step 4: Wait for GREEN time
        time.sleep(green_time)

        # Step 5: Set signal to YELLOW
        light_status[signal_id] = 'YELLOW'
        print(f"\nSignal {signal_id}: YELLOW {YELLOW_TIME}s")
        time.sleep(YELLOW_TIME)

        # Move to next signal in loop
        time.sleep(1)

def run_all_signals():
    threads = []
    for signal_id, source in SIGNALS.items():
        t = threading.Thread(target=run_signal, args=(signal_id, source))
        t.start()
        threads.append(t)
        time.sleep(1)  # slight delay to prevent perfect sync

    for t in threads:
        t.join()

if __name__ == "__main__":
    print("Smart Traffic Signal Controller Started")
    run_all_signals()
